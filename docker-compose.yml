
services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: postgres
    environment:
      POSTGRES_DB: app_db
      POSTGRES_USER: app_user
      POSTGRES_PASSWORD: app_password
      # Additional database for Keycloak
      POSTGRES_MULTIPLE_DATABASES: keycloak_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init-multi-db.sh:/docker-entrypoint-initdb.d/init-multi-db.sh
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app_user -d app_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Keycloak Authentication Server
  keycloak:
    image: quay.io/keycloak/keycloak:24.0
    container_name: keycloak
    command: start-dev
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak_db
      KC_DB_USERNAME: app_user
      KC_DB_PASSWORD: app_password
      KC_HOSTNAME_STRICT: false
      KC_HTTP_ENABLED: true
      KC_HEALTH_ENABLED: true
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin123
    ports:
      - "8090:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 60s
      timeout: 30s
      retries: 10
      start_period: 60s

  # Symfony Backend with FrankenPHP
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: symfony-backend
    environment:
      # Database configuration
      DATABASE_URL: postgresql://app_user:app_password@postgres:5432/app_db
      # Redis configuration
      REDIS_URL: redis://redis:6379
      # Keycloak configuration
      KEYCLOAK_URL: http://keycloak:8080
      KEYCLOAK_REALM: skeleton
      # Symfony environment
      APP_ENV: dev
      APP_SECRET: symfony-secret-change-in-production
    volumes:
      - ./backend:/app
    ports:
      - "8080:80"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nuxt Frontend with BFF
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: nuxt-frontend
    environment:
      # BFF Configuration - API calls will be made server-side
      NUXT_API_BASE_URL: http://backend:80
      NUXT_REDIS_URL: redis://redis:6379
      # Public configuration for client
      NUXT_PUBLIC_APP_URL: http://localhost:3000
      # Keycloak configuration for server-side auth
      NUXT_KEYCLOAK_URL: http://keycloak:8080
      NUXT_KEYCLOAK_REALM: skeleton
      NUXT_KEYCLOAK_CLIENT_ID: nuxt-frontend
      NUXT_KEYCLOAK_CLIENT_SECRET: ""
      # Public Keycloak URL for browser redirects
      NUXT_PUBLIC_KEYCLOAK_URL: http://localhost:8090
      NUXT_PUBLIC_KEYCLOAK_REALM: skeleton
      NUXT_PUBLIC_KEYCLOAK_CLIENT_ID: nuxt-frontend
      # Session configuration
      NUXT_SESSION_SECRET: session-secret-key-change-in-production
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - backend
      - redis
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (optional for development, required for production)
  nginx:
    image: nginx:alpine
    container_name: nginx
    volumes:
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "80:80"
    depends_on:
      - frontend
      - keycloak
    networks:
      - app-network

volumes:
  postgres_data:
  redis_data:
  frontend_node_modules:

networks:
  app-network:
    driver: bridge